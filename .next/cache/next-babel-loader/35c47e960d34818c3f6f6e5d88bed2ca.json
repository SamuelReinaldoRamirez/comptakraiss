{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { EmptyState, Layout, Page } from '@shopify/polaris';\nimport { ResourcePicker, TitleBar } from '@shopify/app-bridge-react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport store from 'store-js';\nimport ResourceListWithProducts from '../components/ResourceList';\nimport ResourceListWithOrders from '../components/getOrders'; //const img = 'https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg';\n\nclass Index extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      open: false\n    });\n  }\n\n  render() {\n    const emptyState = !store.get('ids');\n    return /*#__PURE__*/_jsx(ResourceListWithOrders, {});\n  }\n  /*return (\r\n    <Page>\r\n      <TitleBar\r\n        title=\"Sample App\"\r\n        primaryAction={{\r\n          content: 'Select products',\r\n          //comment faire 2 lambdas à la suite pour avoir aussi le console log?\r\n          onAction: () => this.setState({ open: true }),\r\n          //onAction: () => console.log('clickedd'),\r\n        }}\r\n      />\r\n      <ResourcePicker\r\n        resourceType=\"Product\"\r\n        showVariants={false}\r\n        open={this.state.open}\r\n        onSelection={(resources) => this.handleSelection(resources)}\r\n        onCancel={() => this.setState({ open: false })}\r\n      />\r\n        <Layout>\r\n          <EmptyState\r\n            heading=\"Select products to start\"\r\n            action={{\r\n              content: 'Select products',\r\n              onAction: () => this.setState({ open: true }),\r\n            }}\r\n            //image={img}\r\n          >\r\n            <p>Select products and change their price temporarily</p>\r\n          </EmptyState>\r\n        </Layout>\r\n        {emptyState ? (\r\n          <ResourceListWithOrders />\r\n          ) : (\r\n          //<ResourceListWithProducts />\r\n          <ResourceListWithOrders />\r\n      )}\r\n    </Page>\r\n  );\r\n  }\r\n  handleSelection = (resources) => {\r\n  const idsFromResources = resources.selection.map((product) => product.id);\r\n  this.setState({ open: false })\r\n  console.log(resources)\r\n  console.log(idsFromResources)\r\n  console.log(resources.id)\r\n  store.set('ids', idsFromResources);\r\n  };*/\n\n\n}\n\nexport default Index;","map":{"version":3,"sources":["C:/Users/samue/Documents/compta-kraiss/nodee/pages/index.js"],"names":["EmptyState","Layout","Page","ResourcePicker","TitleBar","React","ReactDOM","store","ResourceListWithProducts","ResourceListWithOrders","Index","Component","open","render","emptyState","get"],"mappings":";;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,IAA7B,QAAyC,kBAAzC;AACA,SAASC,cAAT,EAAyBC,QAAzB,QAAyC,2BAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,wBAAP,MAAqC,4BAArC;AACA,OAAOC,sBAAP,MAAmC,yBAAnC,C,CAIA;;AAEA,MAAMC,KAAN,SAAoBL,KAAK,CAACM,SAA1B,CAAoC;AAAA;AAAA;;AAAA,mCAC1B;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAD0B;AAAA;;AAElCC,EAAAA,MAAM,GAAG;AACP,UAAMC,UAAU,GAAG,CAACP,KAAK,CAACQ,GAAN,CAAU,KAAV,CAApB;AACA,wBACE,KAAC,sBAAD,KADF;AAEG;AACH;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AArDoC;;AAwDpC,eAAeL,KAAf","sourcesContent":["import { EmptyState, Layout, Page } from '@shopify/polaris';\r\nimport { ResourcePicker, TitleBar } from '@shopify/app-bridge-react';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport store from 'store-js';\r\nimport ResourceListWithProducts from '../components/ResourceList';\r\nimport ResourceListWithOrders from '../components/getOrders';\r\n\r\n\r\n\r\n//const img = 'https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg';\r\n\r\nclass Index extends React.Component {\r\n  state = { open: false };\r\n  render() {\r\n    const emptyState = !store.get('ids');\r\n    return(\r\n      <ResourceListWithOrders />\r\n    );}\r\n    /*return (\r\n      <Page>\r\n        <TitleBar\r\n          title=\"Sample App\"\r\n          primaryAction={{\r\n            content: 'Select products',\r\n            //comment faire 2 lambdas à la suite pour avoir aussi le console log?\r\n            onAction: () => this.setState({ open: true }),\r\n            //onAction: () => console.log('clickedd'),\r\n          }}\r\n        />\r\n        <ResourcePicker\r\n          resourceType=\"Product\"\r\n          showVariants={false}\r\n          open={this.state.open}\r\n          onSelection={(resources) => this.handleSelection(resources)}\r\n          onCancel={() => this.setState({ open: false })}\r\n        />\r\n          <Layout>\r\n            <EmptyState\r\n              heading=\"Select products to start\"\r\n              action={{\r\n                content: 'Select products',\r\n                onAction: () => this.setState({ open: true }),\r\n              }}\r\n              //image={img}\r\n            >\r\n              <p>Select products and change their price temporarily</p>\r\n            </EmptyState>\r\n          </Layout>\r\n          {emptyState ? (\r\n            <ResourceListWithOrders />\r\n            ) : (\r\n            //<ResourceListWithProducts />\r\n            <ResourceListWithOrders />\r\n        )}\r\n      </Page>\r\n    );\r\n  }\r\n  handleSelection = (resources) => {\r\n    const idsFromResources = resources.selection.map((product) => product.id);\r\n    this.setState({ open: false })\r\n    console.log(resources)\r\n    console.log(idsFromResources)\r\n    console.log(resources.id)\r\n    store.set('ids', idsFromResources);\r\n  };*/\r\n}\r\n\r\nexport default Index;"]},"metadata":{},"sourceType":"module"}