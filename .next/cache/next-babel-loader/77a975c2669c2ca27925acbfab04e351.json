{"ast":null,"code":"import _classCallCheck from \"C:/Users/samue/Documents/compta-kraiss/nodee/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/samue/Documents/compta-kraiss/nodee/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/samue/Documents/compta-kraiss/nodee/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"C:/Users/samue/Documents/compta-kraiss/nodee/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:/Users/samue/Documents/compta-kraiss/nodee/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _taggedTemplateLiteral from \"C:/Users/samue/Documents/compta-kraiss/nodee/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\nquery {\\n  orders(first: 50) {\\n    edges {\\n      cursor\\n      node {\\n        name\\n        email\\n        createdAt\\n        fulfillments{\\n          id\\n          name\\n          trackingInfo{\\n            company\\n            number\\n          }\\n          estimatedDeliveryAt\\n          deliveredAt\\n          displayStatus\\n          status\\n        }\\n        shippingLine{\\n          carrierIdentifier\\n        }\\n        customer{\\n          firstName\\n          lastName\\n          email\\n        }\\n      }\\n    }\\n  }\\n}\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Card, Page, DataTable, Pagination, Button } from '@shopify/polaris';\nimport React, { PureComponent, Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\nimport Select from './selectdrop';\nimport axios from 'axios';\nvar GET_ORDERS_BY_ID = gql(_templateObject());\nvar retourDuGet = [];\n/*let AuthUser = function(data) {\r\n   return google.login(data.username, data.password).then(token => { return token } )\r\n }\r\n let userToken = await AuthUser(data)\r\n console.log(userToken)*/\n\n/* let callGet = function(){\r\n   console.log(\"axios\") \r\n var retourDeFin;\r\n retourDuGet = await axios.get(\"https://\"+KEY_NGROKBACK+\".ngrok.io/getStateOrder\", {headers: {\"Content-Type\": 'application/json'}})\r\n .then(function(result) {\r\n   console.log(\"result dans le then dans le call\")\r\n   console.log(result.data)\r\n   retourDeFin = result.data\r\n   return result.data;\r\n })\r\n .catch(err => console.error(err))\r\n// retourDuGet = axios.get(\"https://\"+KEY_NGROKBACK+\".ngrok.io/getStateOrder\", {headers: {\"Content-Type\": 'application/json'}}).value.data\r\nconsole.log(\"result à la fin du call\")\r\nconsole.log(retourDeFin) \r\nreturn retourDeFin\r\n}*/\n\n/*async function callGet(){\r\n  console.log(\"axios\") \r\n  var retourDeFin;\r\n  retourDuGet = await axios.get(\"https://\"+KEY_NGROKBACK+\".ngrok.io/getStateOrder\", {headers: {\"Content-Type\": 'application/json'}})\r\n  .then(function(result) {\r\n    console.log(\"result dans le then dans le call\")\r\n    console.log(result.data)\r\n    retourDeFin = result.data\r\n    return result.data;\r\n  })\r\n  .catch(err => console.error(err))\r\n // retourDuGet = axios.get(\"https://\"+KEY_NGROKBACK+\".ngrok.io/getStateOrder\", {headers: {\"Content-Type\": 'application/json'}}).value.data\r\n console.log(\"result à la fin du call\")\r\n console.log(retourDeFin) \r\n return retourDeFin\r\n}*/\n\nfunction callGet() {\n  console.log(\"axios\");\n  axios.get(\"https://\" + KEY_NGROKBACK + \".ngrok.io/getStateOrder\", {\n    headers: {\n      \"Content-Type\": 'application/json'\n    }\n  }).then(function (result) {\n    console.log(\"rrrt\");\n    console.log(result.data);\n    return result.data;\n  });\n}\n\nfunction getCol(matrix, col) {\n  var column = [];\n\n  for (var i = 0; i < matrix.length; i++) {\n    column.push(matrix[i][col]);\n  }\n\n  return column;\n}\n\nfunction DataTableExample(data) {\n  function callGetStateOrder() {\n    console.log(\"axios cal get state order\");\n    return axios.get(\"https://\" + KEY_NGROKBACK + \".ngrok.io/getStateOrder\", {\n      headers: {\n        \"Content-Type\": 'application/json'\n      }\n    });\n  }\n\n  var items = data.orders.edges;\n  console.log(\"alpha phase\");\n  callGet(); //console.log(callGet())\n  //console.log(() => callGet())\n\n  function itemsToNode(_ref) {\n    var cursor = _ref.cursor,\n        node = _ref.node;\n    return {\n      node: node\n    }.node;\n  }\n\n  ;\n\n  function nodeToRows(node, buildingRaw) {\n    /*console.log(\"node\")\r\n    console.log(node)\r\n    console.log('dans la lambda profonde')*/\n    Object.entries(node).forEach(function (element, index) {\n      /*console.log(element[0] !== '__typename')\r\n      console.log(element[0] != '__typename')\r\n      console.log(element[0])*/\n      if (element[0] !== '__typename') {\n        /* console.log(buildingRaw)\r\n         console.log([element[1]])\r\n         console.log(buildingRaw.concat([element[1]]))\r\n         console.log('____________')*/\n        buildingRaw = typeof element[1] === 'object' && element[1] !== null ? nodeToRows(element[1], buildingRaw) : buildingRaw.concat([element[1]]);\n      }\n    });\n    return buildingRaw;\n  }\n  /* console.log('items.map(itemsToNode)')\r\n   console.log(items.map(itemsToNode))*/\n\n\n  var rows = [];\n  items.map(itemsToNode).forEach(function (value, key) {\n    /* console.log('key,value')\r\n     console.log(key)\r\n     console.log(value)*/\n    rows[key] = nodeToRows(value, []);\n  });\n\n  function initRows(data) {\n    console.log('Init rows');\n    console.log(data);\n    rows.forEach(function (part, index) {\n      /* this.setState({ value: event.target.value });\r\n        store.set('etat'+this.props.id, { id : this.props.id, choix : event.target.value})\r\n        var orderState = (event.target.value == \"Select…\") ? null : event.target.value;\r\n        console.log(orderState)*/\n      rows[index] = [/*#__PURE__*/_jsx(Select, {\n        id: index,\n        value: data[index].order_state\n      })].concat(part); //.setState({value : data[index].order_state})]\n    }, rows);\n    var coloneDesEtatsASetter = getCol(rows, 0);\n    console.log(\"colonne des select\");\n    console.log(coloneDesEtatsASetter);\n    var coloneDesNamesIds = getCol(rows, 1);\n  }\n\n  var rowsFromDB = [];\n  callGetStateOrder().then(function (result) {\n    console.log(\"call get state order callback\");\n    console.log(result.data);\n    initRows(result.data);\n  });\n  /** SAMIA DEBUT\r\n  rows.forEach(function (part, index) {\r\n    //axios.getEtat du select à setter (en fonction de la page et du tri (le tri doit etre global dans un premier temps et puis on pourra faire un tri sur les seuls éléments de la page aussi))\r\n    rows[index] = [<Select id={index}></Select>].concat(part);\r\n  }, rows);\r\n    console.log('rows');\r\n  console.log(rows);\r\n    //on ne tient pas encore compte de la pagination\r\n  var coloneDesEtatsASetter = getCol(rows, 0)\r\n  console.log('vide?')\r\n  console.log(coloneDesEtatsASetter)\r\n  var coloneDesNamesIds = getCol(rows, 1)\r\n    var rowsFromDB = [];\r\n  console.log(rowsFromDB)\r\n  console.log(\"beta phase\")\r\n  SAMIA FIN **/\n\n  /*let AuthUser = function(data) {\r\n    return google.login(data.username, data.password).then(token => { return token } )\r\n  }\r\n  let userToken = await AuthUser(data)\r\n  console.log(userToken)*/\n\n  console.log(callGet());\n  var retourDuCallGet;\n  /*console.log(callGet().then(function(result) {\r\n    console.log(\"le result dans le then\")\r\n    console.log(result) // \"Some User token\"\r\n    retourDuCallGet = result;\r\n    console.log('resoleveee')\r\n    //resolve(result)\r\n    return result\r\n  }).then(function(result) {\r\n  console.log(\"le result dans le then\")\r\n  console.log(result) // \"Some User token\"\r\n  retourDuCallGet = result;\r\n  return result\r\n  }))*/\n\n  console.log(\"retourDuCallGet\");\n  console.log(retourDuCallGet);\n  /*retourDuCallGet.forEach((value, key)=> {\r\n    console.log(value)\r\n      rowsFromDB[key] = nodeToRows(value,[]) \r\n   })*/\n\n  console.log(\"rowsFromDB\");\n  console.log(rowsFromDB);\n  return /*#__PURE__*/_jsx(Page, {\n    fullWidth: \"true\",\n    children: /*#__PURE__*/_jsxs(Card, {\n      children: [/*#__PURE__*/_jsx(Button, {\n        onClick: function onClick() {\n          return callGet();\n        },\n        children: \"Example button\"\n      }), /*#__PURE__*/_jsx(DataTable, {\n        columnContentTypes: ['text', 'text', 'text', 'text', 'text', 'text', 'text'],\n        headings: ['id', 'name', 'email', 'jcp', 'jcp', 'jcp', 'jcp'] //il faut récupérer les order states de la db et peut etre les mettre en cache ca serait cool\n        ,\n        rows: rows //'<img src=\"'+data+'\">'\n\n        /*source={\r\n          item.node.lineItems.edges[0]\r\n            ? item.node.lineItems.edges[0].node.image.originalSrc\r\n            : ''\r\n        }*/\n        //totals={['', '', '', 255, '$155,830.00']}\n\n      })]\n    })\n  });\n}\n\n_c = DataTableExample;\n\nvar ResourceListWithOrders = /*#__PURE__*/function (_React$Component) {\n  _inherits(ResourceListWithOrders, _React$Component);\n\n  var _super = _createSuper(ResourceListWithOrders);\n\n  function ResourceListWithOrders() {\n    _classCallCheck(this, ResourceListWithOrders);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ResourceListWithOrders, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsx(Query, {\n        query: GET_ORDERS_BY_ID,\n        children: function children(_ref2) {\n          var data = _ref2.data,\n              loading = _ref2.loading,\n              error = _ref2.error;\n          if (loading) return /*#__PURE__*/_jsx(\"div\", {\n            children: \"Loading\\u2026\"\n          });\n          if (error) return /*#__PURE__*/_jsx(\"div\", {\n            children: error.message\n          });\n          console.log(data);\n          console.log(data.orders.edges); //console.log(data.orders.edges[0].node.lineItems.edges[0].node.image.originalSrc);\n\n          return DataTableExample(data);\n        }\n      });\n    }\n  }]);\n\n  return ResourceListWithOrders;\n}(React.Component);\n/*<Card>\r\n  <p>Les 50 dernières commandes</p>\r\n  <ResourceList\r\n    showHeader\r\n    resourceName={{ singular: 'Order', plural: 'Orders' }}\r\n    items={data.orders.edges}\r\n    renderItem={item => {\r\n      const orderName = item.node.name\r\n      const media = (\r\n        <Thumbnail\r\n          source={\r\n            item.node.lineItems.edges[0]\r\n              ? item.node.lineItems.edges[0].node.image.originalSrc\r\n              : ''\r\n          }\r\n        />\r\n      );\r\n      const price = item.node.netPaymentSet.shopMoney.amount;\r\n      return (\r\n        \r\n        <ResourceList.Item\r\n        media = {orderName}\r\n         // id={item.id}\r\n          media={media}\r\n          //accessibilityLabel={`View details for ${item.title}`}\r\n          onClick={() => {\r\n            //store.set('item', item);\r\n            console.log('store.set')\r\n            //redirectToProduct();\r\n          }}\r\n        >\r\n          <Stack>\r\n          <Stack.Item>\r\n              <p>{orderName}</p>\r\n            </Stack.Item>\r\n            <Stack.Item fill>\r\n              <h3>\r\n                <TextStyle variation=\"strong\">\r\n\r\n                  {item.node.id}\r\n                </TextStyle>\r\n              </h3>\r\n            </Stack.Item>\r\n            <Stack.Item>\r\n              <p>${price}</p>\r\n            </Stack.Item>\r\n            <Stack.Item>\r\n              <p>Expires on R </p>\r\n            </Stack.Item>\r\n          </Stack>\r\n        </ResourceList.Item>\r\n      );\r\n    }}\r\n  />\r\n</Card>\r\n);\r\n}}\r\n</Query>\r\n);\r\n}\r\n}*/\n\n\nexport default ResourceListWithOrders;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataTableExample\");","map":{"version":3,"sources":["C:/Users/samue/Documents/compta-kraiss/nodee/components/getOrders.js"],"names":["gql","Query","Card","Page","DataTable","Pagination","Button","React","PureComponent","Fragment","ReactDOM","Redirect","Context","Select","axios","GET_ORDERS_BY_ID","retourDuGet","callGet","console","log","get","KEY_NGROKBACK","headers","then","result","data","getCol","matrix","col","column","i","length","push","DataTableExample","callGetStateOrder","items","orders","edges","itemsToNode","cursor","node","nodeToRows","buildingRaw","Object","entries","forEach","element","index","concat","rows","map","value","key","initRows","part","order_state","coloneDesEtatsASetter","coloneDesNamesIds","rowsFromDB","retourDuCallGet","ResourceListWithOrders","loading","error","message","Component"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport {\r\n  Card,\r\n  Page,\r\n  DataTable,\r\n  Pagination,\r\n  Button\r\n} from '@shopify/polaris';\r\nimport React, { PureComponent, Fragment } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Redirect } from '@shopify/app-bridge/actions';\r\nimport { Context } from '@shopify/app-bridge-react';\r\nimport Select from './selectdrop';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nconst GET_ORDERS_BY_ID = gql`\r\nquery {\r\n  orders(first: 50) {\r\n    edges {\r\n      cursor\r\n      node {\r\n        name\r\n        email\r\n        createdAt\r\n        fulfillments{\r\n          id\r\n          name\r\n          trackingInfo{\r\n            company\r\n            number\r\n          }\r\n          estimatedDeliveryAt\r\n          deliveredAt\r\n          displayStatus\r\n          status\r\n        }\r\n        shippingLine{\r\n          carrierIdentifier\r\n        }\r\n        customer{\r\n          firstName\r\n          lastName\r\n          email\r\n        }\r\n      }\r\n    }\r\n  }\r\n}`;\r\n\r\nvar retourDuGet = [];\r\n\r\n/*let AuthUser = function(data) {\r\n   return google.login(data.username, data.password).then(token => { return token } )\r\n }\r\n let userToken = await AuthUser(data)\r\n console.log(userToken)*/\r\n\r\n/* let callGet = function(){\r\n   console.log(\"axios\") \r\n var retourDeFin;\r\n retourDuGet = await axios.get(\"https://\"+KEY_NGROKBACK+\".ngrok.io/getStateOrder\", {headers: {\"Content-Type\": 'application/json'}})\r\n .then(function(result) {\r\n   console.log(\"result dans le then dans le call\")\r\n   console.log(result.data)\r\n   retourDeFin = result.data\r\n   return result.data;\r\n })\r\n .catch(err => console.error(err))\r\n// retourDuGet = axios.get(\"https://\"+KEY_NGROKBACK+\".ngrok.io/getStateOrder\", {headers: {\"Content-Type\": 'application/json'}}).value.data\r\nconsole.log(\"result à la fin du call\")\r\nconsole.log(retourDeFin) \r\nreturn retourDeFin\r\n}*/\r\n\r\n/*async function callGet(){\r\n  console.log(\"axios\") \r\n  var retourDeFin;\r\n  retourDuGet = await axios.get(\"https://\"+KEY_NGROKBACK+\".ngrok.io/getStateOrder\", {headers: {\"Content-Type\": 'application/json'}})\r\n  .then(function(result) {\r\n    console.log(\"result dans le then dans le call\")\r\n    console.log(result.data)\r\n    retourDeFin = result.data\r\n    return result.data;\r\n  })\r\n  .catch(err => console.error(err))\r\n // retourDuGet = axios.get(\"https://\"+KEY_NGROKBACK+\".ngrok.io/getStateOrder\", {headers: {\"Content-Type\": 'application/json'}}).value.data\r\n console.log(\"result à la fin du call\")\r\n console.log(retourDeFin) \r\n return retourDeFin\r\n}*/\r\n\r\n\r\nfunction callGet() {\r\n  console.log(\"axios\")\r\n  axios.get(\"https://\" + KEY_NGROKBACK + \".ngrok.io/getStateOrder\", { headers: { \"Content-Type\": 'application/json' } })\r\n    .then(function (result) {\r\n      console.log(\"rrrt\")\r\n      console.log(result.data)\r\n      return result.data\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\nfunction getCol(matrix, col) {\r\n  var column = [];\r\n  for (var i = 0; i < matrix.length; i++) {\r\n    column.push(matrix[i][col]);\r\n  }\r\n  return column;\r\n}\r\n\r\n\r\nfunction DataTableExample(data) {\r\n\r\n  function callGetStateOrder() {\r\n    console.log(\"axios cal get state order\")\r\n    return axios.get(\"https://\" + KEY_NGROKBACK + \".ngrok.io/getStateOrder\", { headers: { \"Content-Type\": 'application/json' } })\r\n  }\r\n\r\n  const items = data.orders.edges;\r\n  console.log(\"alpha phase\")\r\n  callGet()\r\n  //console.log(callGet())\r\n  //console.log(() => callGet())\r\n\r\n\r\n  function itemsToNode({ cursor, node }) {\r\n    return { node }.node\r\n  };\r\n\r\n\r\n  function nodeToRows(node, buildingRaw) {\r\n    /*console.log(\"node\")\r\n    console.log(node)\r\n    console.log('dans la lambda profonde')*/\r\n    Object.entries(node).forEach((element, index) => {\r\n\r\n      /*console.log(element[0] !== '__typename')\r\n      console.log(element[0] != '__typename')\r\n      console.log(element[0])*/\r\n\r\n      if (element[0] !== '__typename') {\r\n        /* console.log(buildingRaw)\r\n         console.log([element[1]])\r\n         console.log(buildingRaw.concat([element[1]]))\r\n         console.log('____________')*/\r\n        buildingRaw = (typeof element[1] === 'object' && element[1] !== null) ? nodeToRows(element[1], buildingRaw) : buildingRaw.concat([element[1]]);\r\n      }\r\n    });\r\n    return buildingRaw;\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  /* console.log('items.map(itemsToNode)')\r\n   console.log(items.map(itemsToNode))*/\r\n  var rows = [];\r\n  items.map(itemsToNode).forEach((value, key) => {\r\n    /* console.log('key,value')\r\n     console.log(key)\r\n     console.log(value)*/\r\n    rows[key] = nodeToRows(value, [])\r\n  })\r\n\r\n  function initRows(data) {\r\n    console.log('Init rows')\r\n    console.log(data)\r\n    rows.forEach(function (part, index) {\r\n\r\n     /* this.setState({ value: event.target.value });\r\n       store.set('etat'+this.props.id, { id : this.props.id, choix : event.target.value})\r\n       var orderState = (event.target.value == \"Select…\") ? null : event.target.value;\r\n       console.log(orderState)*/\r\n\r\n      rows[index] = [<Select id={index} value={ data[index].order_state}></Select>].concat(part);\r\n        //.setState({value : data[index].order_state})]\r\n    }, rows);\r\n  \r\n    var coloneDesEtatsASetter = getCol(rows, 0)\r\n    console.log(\"colonne des select\")\r\n    console.log(coloneDesEtatsASetter)\r\n    var coloneDesNamesIds = getCol(rows, 1)\r\n  \r\n  }\r\n\r\n  var rowsFromDB = [];\r\n\r\n  callGetStateOrder().then(function (result) {\r\n    console.log(\"call get state order callback\")\r\n    console.log(result.data)\r\n    initRows(result.data)\r\n  })\r\n\r\n  /** SAMIA DEBUT\r\n  rows.forEach(function (part, index) {\r\n    //axios.getEtat du select à setter (en fonction de la page et du tri (le tri doit etre global dans un premier temps et puis on pourra faire un tri sur les seuls éléments de la page aussi))\r\n    rows[index] = [<Select id={index}></Select>].concat(part);\r\n  }, rows);\r\n\r\n  console.log('rows');\r\n  console.log(rows);\r\n\r\n  //on ne tient pas encore compte de la pagination\r\n  var coloneDesEtatsASetter = getCol(rows, 0)\r\n  console.log('vide?')\r\n  console.log(coloneDesEtatsASetter)\r\n  var coloneDesNamesIds = getCol(rows, 1)\r\n\r\n  var rowsFromDB = [];\r\n  console.log(rowsFromDB)\r\n  console.log(\"beta phase\")\r\n  SAMIA FIN **/\r\n\r\n  /*let AuthUser = function(data) {\r\n    return google.login(data.username, data.password).then(token => { return token } )\r\n  }\r\n  let userToken = await AuthUser(data)\r\n  console.log(userToken)*/\r\n\r\n\r\n  console.log(callGet())\r\n  var retourDuCallGet;\r\n  /*console.log(callGet().then(function(result) {\r\n    console.log(\"le result dans le then\")\r\n    console.log(result) // \"Some User token\"\r\n    retourDuCallGet = result;\r\n    console.log('resoleveee')\r\n    //resolve(result)\r\n    return result\r\n }).then(function(result) {\r\n  console.log(\"le result dans le then\")\r\n  console.log(result) // \"Some User token\"\r\n  retourDuCallGet = result;\r\n  return result\r\n}))*/\r\n  console.log(\"retourDuCallGet\")\r\n  console.log(retourDuCallGet)\r\n  /*retourDuCallGet.forEach((value, key)=> {\r\n    console.log(value)\r\n\r\n    rowsFromDB[key] = nodeToRows(value,[]) \r\n   })*/\r\n  console.log(\"rowsFromDB\")\r\n  console.log(rowsFromDB)\r\n\r\n\r\n  return (\r\n    <Page fullWidth=\"true\">\r\n      <Card>\r\n        <Button onClick={() => callGet()}>Example button</Button>\r\n        {//retourDuGet\r\n        }\r\n        <DataTable\r\n          columnContentTypes={[\r\n            'text',\r\n            'text',\r\n            'text',\r\n            'text',\r\n            'text',\r\n            'text',\r\n            'text',\r\n          ]}\r\n          headings={[\r\n            'id',\r\n            'name',\r\n            'email',\r\n            'jcp',\r\n            'jcp',\r\n            'jcp',\r\n            'jcp',\r\n          ]}\r\n          //il faut récupérer les order states de la db et peut etre les mettre en cache ca serait cool\r\n          rows={rows}\r\n        //'<img src=\"'+data+'\">'\r\n\r\n        /*source={\r\n          item.node.lineItems.edges[0]\r\n            ? item.node.lineItems.edges[0].node.image.originalSrc\r\n            : ''\r\n        }*/\r\n        //totals={['', '', '', 255, '$155,830.00']}\r\n        />\r\n      </Card>\r\n    </Page>\r\n\r\n\r\n  );\r\n}\r\n\r\nclass ResourceListWithOrders extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <Query query={GET_ORDERS_BY_ID}>\r\n        {({ data, loading, error }) => {\r\n          if (loading) return <div>Loading…</div>;\r\n          if (error) return <div>{error.message}</div>;\r\n          console.log(data);\r\n          console.log(data.orders.edges);\r\n          //console.log(data.orders.edges[0].node.lineItems.edges[0].node.image.originalSrc);\r\n\r\n          return (\r\n            DataTableExample(data)\r\n          );\r\n        }}\r\n      </Query>\r\n    );\r\n  }\r\n}\r\n\r\n/*<Card>\r\n  <p>Les 50 dernières commandes</p>\r\n  <ResourceList\r\n    showHeader\r\n    resourceName={{ singular: 'Order', plural: 'Orders' }}\r\n    items={data.orders.edges}\r\n    renderItem={item => {\r\n      const orderName = item.node.name\r\n      const media = (\r\n        <Thumbnail\r\n          source={\r\n            item.node.lineItems.edges[0]\r\n              ? item.node.lineItems.edges[0].node.image.originalSrc\r\n              : ''\r\n          }\r\n        />\r\n      );\r\n      const price = item.node.netPaymentSet.shopMoney.amount;\r\n      return (\r\n        \r\n        <ResourceList.Item\r\n        media = {orderName}\r\n         // id={item.id}\r\n          media={media}\r\n          //accessibilityLabel={`View details for ${item.title}`}\r\n          onClick={() => {\r\n            //store.set('item', item);\r\n            console.log('store.set')\r\n            //redirectToProduct();\r\n          }}\r\n        >\r\n          <Stack>\r\n          <Stack.Item>\r\n              <p>{orderName}</p>\r\n            </Stack.Item>\r\n            <Stack.Item fill>\r\n              <h3>\r\n                <TextStyle variation=\"strong\">\r\n\r\n                  {item.node.id}\r\n                </TextStyle>\r\n              </h3>\r\n            </Stack.Item>\r\n            <Stack.Item>\r\n              <p>${price}</p>\r\n            </Stack.Item>\r\n            <Stack.Item>\r\n              <p>Expires on R </p>\r\n            </Stack.Item>\r\n          </Stack>\r\n        </ResourceList.Item>\r\n      );\r\n    }}\r\n  />\r\n</Card>\r\n);\r\n}}\r\n</Query>\r\n);\r\n}\r\n}*/\r\n\r\nexport default ResourceListWithOrders;"]},"metadata":{},"sourceType":"module"}