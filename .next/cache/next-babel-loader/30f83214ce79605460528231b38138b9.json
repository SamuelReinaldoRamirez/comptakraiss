{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Card, ResourceList, Stack, TextStyle, Thumbnail } from '@shopify/polaris';\nimport store from 'store-js';\nimport React from 'react';\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        handle\n        descriptionHtml\n        id\n        images(first: 1) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants(first: 1) {\n          edges {\n            node {\n              price\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nclass ResourceListWithProducts extends React.Component {\n  render() {\n    const twoWeeksFromNow = new Date(Date.now() + 12096e5).toDateString();\n    return (\n      /*#__PURE__*/\n      //<Query query={GET_PRODUCTS_BY_ID}>\n      _jsx(Query, {\n        query: GET_PRODUCTS_BY_ID,\n        variables: {\n          ids: store.get('ids')\n        },\n        children: ({\n          data,\n          loading,\n          error\n        }) => {\n          if (loading) return /*#__PURE__*/_jsx(\"div\", {\n            children: \"Loading\\u2026\"\n          });\n          if (error) return /*#__PURE__*/_jsx(\"div\", {\n            children: error.message\n          });\n          console.log(data);\n          return /*#__PURE__*/_jsx(Card, {\n            children: /*#__PURE__*/_jsx(ResourceList, {\n              showHeader: true,\n              resourceName: {\n                singular: 'Product',\n                plural: 'Products'\n              },\n              items: data.nodes,\n              renderItem: item => {\n                const media = /*#__PURE__*/_jsx(Thumbnail, {\n                  source: item.images.edges[0] ? item.images.edges[0].node.originalSrc : '',\n                  alt: item.images.edges[0] ? item.images.edges[0].node.altText : ''\n                });\n\n                const price = item.variants.edges[0].node.price;\n                return /*#__PURE__*/_jsx(ResourceList.Item, {\n                  id: item.id,\n                  media: media,\n                  accessibilityLabel: `View details for ${item.title}`,\n                  children: /*#__PURE__*/_jsxs(Stack, {\n                    children: [/*#__PURE__*/_jsx(Stack.Item, {\n                      fill: true,\n                      children: /*#__PURE__*/_jsx(\"h3\", {\n                        children: /*#__PURE__*/_jsx(TextStyle, {\n                          variation: \"strong\",\n                          children: item.title\n                        })\n                      })\n                    }), /*#__PURE__*/_jsx(Stack.Item, {\n                      children: /*#__PURE__*/_jsxs(\"p\", {\n                        children: [\"$\", price]\n                      })\n                    }), /*#__PURE__*/_jsx(Stack.Item, {\n                      children: /*#__PURE__*/_jsxs(\"p\", {\n                        children: [\"Expires on \", twoWeeksFromNow, \" \"]\n                      })\n                    })]\n                  })\n                });\n              }\n            })\n          });\n        }\n      })\n    );\n  }\n\n}\n\nexport default ResourceListWithProducts;","map":{"version":3,"sources":["C:/Users/samue/Documents/compta-kraiss/nodee/components/ResourceList.js"],"names":["gql","Query","Card","ResourceList","Stack","TextStyle","Thumbnail","store","React","GET_PRODUCTS_BY_ID","ResourceListWithProducts","Component","render","twoWeeksFromNow","Date","now","toDateString","ids","get","data","loading","error","message","console","log","singular","plural","nodes","item","media","images","edges","node","originalSrc","altText","price","variants","id","title"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport { Card,\r\n    ResourceList,\r\n    Stack,\r\n    TextStyle,\r\n    Thumbnail, } from '@shopify/polaris';\r\nimport store from 'store-js';\r\nimport React from 'react';\r\n\r\nconst GET_PRODUCTS_BY_ID = gql`\r\n  query getProducts($ids: [ID!]!) {\r\n    nodes(ids: $ids) {\r\n      ... on Product {\r\n        title\r\n        handle\r\n        descriptionHtml\r\n        id\r\n        images(first: 1) {\r\n          edges {\r\n            node {\r\n              originalSrc\r\n              altText\r\n            }\r\n          }\r\n        }\r\n        variants(first: 1) {\r\n          edges {\r\n            node {\r\n              price\r\n              id\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nclass ResourceListWithProducts extends React.Component {\r\n    render() {\r\n        const twoWeeksFromNow = new Date(Date.now() + 12096e5).toDateString();\r\n      return (\r\n        //<Query query={GET_PRODUCTS_BY_ID}>\r\n        <Query query={GET_PRODUCTS_BY_ID} variables={{ ids: store.get('ids') }}>\r\n          {({ data, loading, error }) => {\r\n            if (loading) return <div>Loadingâ€¦</div>;\r\n            if (error) return <div>{error.message}</div>;\r\n            console.log(data);\r\n            return (\r\n              <Card>\r\n                <ResourceList\r\n                showHeader\r\n                resourceName={{ singular: 'Product', plural: 'Products' }}\r\n                items={data.nodes}\r\n                renderItem={item => {\r\n                  const media = (\r\n                    <Thumbnail\r\n                      source={\r\n                        item.images.edges[0]\r\n                          ? item.images.edges[0].node.originalSrc\r\n                          : ''\r\n                      }\r\n                      alt={\r\n                        item.images.edges[0]\r\n                          ? item.images.edges[0].node.altText\r\n                          : ''\r\n                      }\r\n                    />\r\n                  );\r\n                  const price = item.variants.edges[0].node.price;\r\n                  return (\r\n                    <ResourceList.Item\r\n                      id={item.id}\r\n                      media={media}\r\n                      accessibilityLabel={`View details for ${item.title}`}\r\n                    >\r\n                      <Stack>\r\n                        <Stack.Item fill>\r\n                          <h3>\r\n                            <TextStyle variation=\"strong\">\r\n                              {item.title}\r\n                            </TextStyle>\r\n                          </h3>\r\n                        </Stack.Item>\r\n                        <Stack.Item>\r\n                          <p>${price}</p>\r\n                        </Stack.Item>\r\n                        <Stack.Item>\r\n                          <p>Expires on {twoWeeksFromNow} </p>\r\n                        </Stack.Item>\r\n                      </Stack>\r\n                    </ResourceList.Item>\r\n                  );\r\n                }}\r\n              />\r\n              </Card>\r\n            );\r\n          }}\r\n        </Query>\r\n      );\r\n    }\r\n  }\r\n  \r\n   export default ResourceListWithProducts;\r\n"]},"metadata":{},"sourceType":"module"}