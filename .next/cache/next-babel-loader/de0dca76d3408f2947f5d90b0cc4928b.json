{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nimport React, { PureComponent, Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport store from 'store-js';\n/*const dotenv = require('dotenv');\r\nconst next = require('next');\r\ndotenv.config();\r\nconst dev = process.env.NODE_ENV !== 'production';\r\nconst app = next({ dev });\r\nconst { REACT_APP_NGROKBACK } = process.env;\r\nconst handle = app.getRequestHandler();\r\n\r\nconsole.log(process.env)\r\napp.prepare().then(() => {\r\n  console.log(\"in app prepare\")\r\n  console.log(REACT_APP_NGROKBACK)\r\n});*/\n//const {REACT_APP_ngrokBack} = process.env;\n//const ngrokBack = REACT_APP_ngrokBack;\n\nconsole.log('cAcAAAAAAAAAAAAAAAAAAAAA');\nconsole.log(KEY_NGROKBACK); //class Select extends PureComponent {\n\nclass Select extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      options: [{\n        name: 'Select…',\n        value: null\n      }, {\n        name: 'A',\n        value: 444\n      }, {\n        name: 'B',\n        value: 333\n      }, {\n        name: 'C',\n        value: 222\n      }],\n      value: '?'\n    });\n\n    _defineProperty(this, \"handleChange\", event => {\n      this.setState({\n        value: event.target.value\n      }); // console.log(this.props.id)\n      //console.log(event.target.value)\n\n      store.set('etat' + this.props.id, {\n        id: this.props.id,\n        choix: event.target.value\n      });\n      var orderState = event.target.value == \"Select…\" ? null : event.target.value;\n      console.log(orderState); //console.log(REACT_APP_ngrokBack)\n      //l'id qu'on envoie en params est l'id du select dans la page concernée. il faudra le faire correspondre au vrai ID en fonction de la pagination et du tri de la datatable\n\n      axios.put( //\"https://547f417cc329.ngrok.io/handle\", \n      \"https://\" + KEY_NGROKBACK + \".ngrok.io/handle\", {\n        \"order_state\": orderState\n      }, {\n        params: {\n          id: this.props.id + 1\n        },\n        headers: {\n          \"Content-Type\": 'application/json'\n        }\n      }); //axios.put(\"https://\"+REACT_APP_ngrokBack+\".ngrok.io/handle\", {})\n      // \"proxy\": \"http://${REACT_APP_ngrokBack}.ngrok.io\",\n      //axios.put(\"localhost:5000/handle\", {})\n\n      /*.then(function(response){\r\n        console.log('yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy')\r\n        console.log(response)\r\n      })*/\n\n      /* var sql = \"UPDATE orders SET order_state = 6 WHERE order_id=1\";\r\n        con.query(sql, function (err, result) {\r\n          if (err) throw err;\r\n          console.log(result.affectedRows + \" record(s) updated\");\r\n        });*/\n    });\n  }\n\n  render() {\n    console.log('value');\n    console.log(this.props.valueDeDB);\n    console.log(this.props.valueDeDB == null);\n    console.log(this.props.valueDeDB === null);\n    console.log(this.props.valueDeDB == undefined);\n    console.log(this.props.valueDeDB === undefined);\n    console.log(this.props.valueDeDB == \"undefined\");\n    console.log(this.props.valueDeDB === \"undefined\");\n    var {\n      options,\n      value\n    } = this.state;\n    var currentId;\n    var etatFromStore; //ici, il faut choisir si value est celui de la bdd (à l'initialisation), ou celui qu'on vien de choisir,( apres un put)\n\n    value = this.props.valueDeDB;\n    var val;\n    currentId = this.props.id, etatFromStore = store.get('etat' + currentId), val = value; //pour setter la ligne 1 (pas la 0) à undefined\n    //etatFromStore.id == 1 ? etatFromStore = undefined : '',\n\n    etatFromStore == undefined ? store.set('etat' + currentId, {\n      id: currentId,\n      choix: val\n    }) : val = etatFromStore.choix; //console.log('etat' + currentId),\n    //console.log(etatFromStore)\n    //console.log(etatFromStore == undefined ? 'pas d\\'id' : etatFromStore.id),\n    // console.log('this')\n    //console.log(this)\n    // <select onChange={this.handleChange} value={value}>\n\n    return /*#__PURE__*/_jsxs(Fragment, {\n      children: [/*#__PURE__*/_jsx(\"select\", {\n        onChange: this.handleChange,\n        value: val,\n        children: options.map(item =>\n        /*#__PURE__*/\n\n        /*console.log('etat'+currentId),\r\n        console.log(etatFromStore),\r\n        console.log(etatFromStore == undefined),\r\n        console.log(etatFromStore == undefined ? 'pas d\\'id' : etatFromStore.id),\r\n        console.log(etatFromStore == undefined ? 'pas de choix choisi' : etatFromStore.choix),\r\n        */\n        //console.log(\"option\"),\n        //console.log(item),\n        //console.log({value}),\n\n        /*console.log(this),*/\n        _jsx(\"option\", {\n          value: item.value,\n          children: item.name\n        }, item.value))\n      }), /*#__PURE__*/_jsxs(\"h1\", {\n        children: [\"Favorite letter: \", value]\n      })]\n    });\n  }\n\n}\n\nexport default Select;","map":{"version":3,"sources":["C:/Users/samue/Documents/compta-kraiss/nodee/components/selectdrop.js"],"names":["axios","React","PureComponent","Fragment","ReactDOM","store","console","log","KEY_NGROKBACK","Select","Component","options","name","value","event","setState","target","set","props","id","choix","orderState","put","params","headers","render","valueDeDB","undefined","state","currentId","etatFromStore","val","get","handleChange","map","item"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport React, { PureComponent, Fragment } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport store from 'store-js';\r\n\r\n/*const dotenv = require('dotenv');\r\nconst next = require('next');\r\ndotenv.config();\r\nconst dev = process.env.NODE_ENV !== 'production';\r\nconst app = next({ dev });\r\nconst { REACT_APP_NGROKBACK } = process.env;\r\nconst handle = app.getRequestHandler();\r\n\r\nconsole.log(process.env)\r\napp.prepare().then(() => {\r\n  console.log(\"in app prepare\")\r\n  console.log(REACT_APP_NGROKBACK)\r\n});*/\r\n\r\n\r\n//const {REACT_APP_ngrokBack} = process.env;\r\n//const ngrokBack = REACT_APP_ngrokBack;\r\nconsole.log('cAcAAAAAAAAAAAAAAAAAAAAA')\r\nconsole.log(KEY_NGROKBACK)\r\n\r\n//class Select extends PureComponent {\r\nclass Select extends React.Component{\r\n    state = {\r\n      options: [\r\n        {\r\n          name: 'Select…',\r\n          value: null,\r\n        },\r\n        {\r\n          name: 'A',\r\n          value: 444,\r\n        },\r\n        {\r\n          name: 'B',\r\n          value: 333,\r\n        },\r\n        {\r\n          name: 'C',\r\n          value: 222,\r\n        },\r\n      ],\r\n      value: '?',\r\n    };\r\n\r\n\r\n    \r\n  \r\n    handleChange = (event) => {\r\n      this.setState({ value: event.target.value });\r\n     // console.log(this.props.id)\r\n      //console.log(event.target.value)\r\n      store.set('etat'+this.props.id, { id : this.props.id, choix : event.target.value})\r\n\r\n      var orderState = (event.target.value == \"Select…\") ? null : event.target.value;\r\n      console.log(orderState)\r\n\r\n\r\n      //console.log(REACT_APP_ngrokBack)\r\n\r\n      //l'id qu'on envoie en params est l'id du select dans la page concernée. il faudra le faire correspondre au vrai ID en fonction de la pagination et du tri de la datatable\r\n      axios.put(\r\n        //\"https://547f417cc329.ngrok.io/handle\", \r\n        \"https://\"+KEY_NGROKBACK+\".ngrok.io/handle\", \r\n        {\"order_state\" : orderState}, \r\n        {params: { id:this.props.id+1 }, headers: {\"Content-Type\": 'application/json'}}\r\n    )\r\n\r\n\r\n      //axios.put(\"https://\"+REACT_APP_ngrokBack+\".ngrok.io/handle\", {})\r\n     // \"proxy\": \"http://${REACT_APP_ngrokBack}.ngrok.io\",\r\n\r\n\r\n      //axios.put(\"localhost:5000/handle\", {})\r\n\r\n      /*.then(function(response){\r\n        console.log('yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy')\r\n        console.log(response)\r\n      })*/\r\n\r\n\r\n      /* var sql = \"UPDATE orders SET order_state = 6 WHERE order_id=1\";\r\n        con.query(sql, function (err, result) {\r\n          if (err) throw err;\r\n          console.log(result.affectedRows + \" record(s) updated\");\r\n        });*/\r\n    };\r\n  \r\n    render() {\r\n      console.log('value')\r\n      console.log(this.props.valueDeDB)\r\n      console.log(this.props.valueDeDB == null)\r\n      console.log(this.props.valueDeDB === null)\r\n      console.log(this.props.valueDeDB == undefined)\r\n      console.log(this.props.valueDeDB === undefined)\r\n      console.log(this.props.valueDeDB == \"undefined\")\r\n      console.log(this.props.valueDeDB === \"undefined\")\r\n\r\n\r\n\r\n\r\n\r\n      var { options, value } = this.state;\r\n      var currentId;\r\n      var etatFromStore;\r\n      //ici, il faut choisir si value est celui de la bdd (à l'initialisation), ou celui qu'on vien de choisir,( apres un put)\r\n      value = this.props.valueDeDB;\r\n      var val;\r\n\r\n      currentId = this.props.id,\r\n      etatFromStore = store.get('etat'+currentId),\r\n      val = value;\r\n\r\n      //pour setter la ligne 1 (pas la 0) à undefined\r\n      //etatFromStore.id == 1 ? etatFromStore = undefined : '',\r\n\r\n      etatFromStore == undefined ? \r\n      store.set('etat'+currentId,{ id : currentId, choix : val}) : \r\n      val=etatFromStore.choix;\r\n      //console.log('etat' + currentId),\r\n      //console.log(etatFromStore)\r\n      //console.log(etatFromStore == undefined ? 'pas d\\'id' : etatFromStore.id),\r\n\r\n\r\n\r\n     // console.log('this')\r\n      //console.log(this)\r\n\r\n  \r\n\r\n     // <select onChange={this.handleChange} value={value}>\r\n\r\n\r\n      return (\r\n        <Fragment>\r\n          <select onChange={this.handleChange} value={val}>\r\n            {options.map(item => (\r\n\r\n              \r\n              \r\n \r\n              /*console.log('etat'+currentId),\r\n              console.log(etatFromStore),\r\n              console.log(etatFromStore == undefined),\r\n              console.log(etatFromStore == undefined ? 'pas d\\'id' : etatFromStore.id),\r\n              console.log(etatFromStore == undefined ? 'pas de choix choisi' : etatFromStore.choix),\r\n             */\r\n              //console.log(\"option\"),\r\n              //console.log(item),\r\n              //console.log({value}),\r\n              /*console.log(this),*/\r\n              <option key={item.value} value={item.value}>\r\n                {item.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          <h1>Favorite letter: {value}</h1>\r\n        </Fragment>\r\n      );\r\n    }\r\n  }\r\n  export default Select;"]},"metadata":{},"sourceType":"module"}