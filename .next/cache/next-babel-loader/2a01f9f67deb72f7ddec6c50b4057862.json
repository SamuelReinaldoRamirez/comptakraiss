{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Card, Page, DataTable, Pagination, Button } from '@shopify/polaris';\nimport React, { PureComponent, Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\nimport Select from './selectdrop';\nimport axios from 'axios';\nconst GET_ORDERS_BY_ID = gql`\nquery {\n  orders(first: 50) {\n    edges {\n      cursor\n      node {\n        name\n        email\n        createdAt\n        fulfillments{\n          id\n          name\n          trackingInfo{\n            company\n            number\n          }\n          estimatedDeliveryAt\n          deliveredAt\n          displayStatus\n          status\n        }\n        shippingLine{\n          carrierIdentifier\n        }\n        customer{\n          firstName\n          lastName\n          email\n        }\n      }\n    }\n  }\n}`;\nvar retourDuGet = [];\n/*let AuthUser = function(data) {\r\n   return google.login(data.username, data.password).then(token => { return token } )\r\n }\r\n let userToken = await AuthUser(data)\r\n console.log(userToken)*/\n\n/* let callGet = function(){\r\n   console.log(\"axios\") \r\n var retourDeFin;\r\n retourDuGet = await axios.get(\"https://\"+KEY_NGROKBACK+\".ngrok.io/getStateOrder\", {headers: {\"Content-Type\": 'application/json'}})\r\n .then(function(result) {\r\n   console.log(\"result dans le then dans le call\")\r\n   console.log(result.data)\r\n   retourDeFin = result.data\r\n   return result.data;\r\n })\r\n .catch(err => console.error(err))\r\n// retourDuGet = axios.get(\"https://\"+KEY_NGROKBACK+\".ngrok.io/getStateOrder\", {headers: {\"Content-Type\": 'application/json'}}).value.data\r\nconsole.log(\"result à la fin du call\")\r\nconsole.log(retourDeFin) \r\nreturn retourDeFin\r\n}*/\n\n/*async function callGet(){\r\n  console.log(\"axios\") \r\n  var retourDeFin;\r\n  retourDuGet = await axios.get(\"https://\"+KEY_NGROKBACK+\".ngrok.io/getStateOrder\", {headers: {\"Content-Type\": 'application/json'}})\r\n  .then(function(result) {\r\n    console.log(\"result dans le then dans le call\")\r\n    console.log(result.data)\r\n    retourDeFin = result.data\r\n    return result.data;\r\n  })\r\n  .catch(err => console.error(err))\r\n // retourDuGet = axios.get(\"https://\"+KEY_NGROKBACK+\".ngrok.io/getStateOrder\", {headers: {\"Content-Type\": 'application/json'}}).value.data\r\n console.log(\"result à la fin du call\")\r\n console.log(retourDeFin) \r\n return retourDeFin\r\n}*/\n\nfunction callGet() {\n  console.log(\"axios\");\n  axios.get(\"https://\" + KEY_NGROKBACK + \".ngrok.io/getStateOrder\", {\n    headers: {\n      \"Content-Type\": 'application/json'\n    }\n  }).then(function (result) {\n    console.log(result);\n  });\n  var retourDeFin;\n  retourDuGet = axios.get(\"https://\" + KEY_NGROKBACK + \".ngrok.io/getStateOrder\", {\n    headers: {\n      \"Content-Type\": 'application/json'\n    }\n  });\n  /* .then(function(result) {\r\n     console.log(\"result dans le then dans le call\")\r\n     console.log(result)\r\n     retourDeFin = result\r\n     return result;\r\n   })\r\n   .catch(err => console.error(err))*/\n  // retourDuGet = axios.get(\"https://\"+KEY_NGROKBACK+\".ngrok.io/getStateOrder\", {headers: {\"Content-Type\": 'application/json'}}).value.data\n\n  console.log(\"result à la fin du call\");\n  console.log(retourDeFin);\n  return retourDeFin;\n}\n\nfunction getCol(matrix, col) {\n  var column = [];\n\n  for (var i = 0; i < matrix.length; i++) {\n    column.push(matrix[i][col]);\n  }\n\n  return column;\n}\n\nfunction DataTableExample(data) {\n  const items = data.orders.edges;\n  console.log(\"alpha phase\");\n  callGet(); //console.log(callGet())\n  //console.log(() => callGet())\n\n  function itemsToNode({\n    cursor,\n    node\n  }) {\n    return {\n      node\n    }.node;\n  }\n\n  ;\n\n  function nodeToRows(node, buildingRaw) {\n    /*console.log(\"node\")\r\n    console.log(node)\r\n    console.log('dans la lambda profonde')*/\n    Object.entries(node).forEach((element, index) => {\n      /*console.log(element[0] !== '__typename')\r\n      console.log(element[0] != '__typename')\r\n      console.log(element[0])*/\n      if (element[0] !== '__typename') {\n        /* console.log(buildingRaw)\r\n         console.log([element[1]])\r\n         console.log(buildingRaw.concat([element[1]]))\r\n         console.log('____________')*/\n        buildingRaw = typeof element[1] === 'object' && element[1] !== null ? nodeToRows(element[1], buildingRaw) : buildingRaw.concat([element[1]]);\n      }\n    });\n    return buildingRaw;\n  }\n  /* console.log('items.map(itemsToNode)')\r\n   console.log(items.map(itemsToNode))*/\n\n\n  var rows = [];\n  items.map(itemsToNode).forEach((value, key) => {\n    /* console.log('key,value')\r\n     console.log(key)\r\n     console.log(value)*/\n    rows[key] = nodeToRows(value, []);\n  });\n  rows.forEach(function (part, index) {\n    //axios.getEtat du select à setter (en fonction de la page et du tri (le tri doit etre global dans un premier temps et puis on pourra faire un tri sur les seuls éléments de la page aussi))\n    rows[index] = [/*#__PURE__*/_jsx(Select, {\n      id: index\n    })].concat(part);\n  }, rows);\n  console.log('rows');\n  console.log(rows); //on ne tient pas encore compte de la pagination\n\n  var coloneDesEtatsASetter = getCol(rows, 0);\n  var coloneDesNamesIds = getCol(rows, 1);\n  var rowsFromDB = [];\n  console.log(rowsFromDB);\n  console.log(\"beta phase\");\n  /*let AuthUser = function(data) {\r\n    return google.login(data.username, data.password).then(token => { return token } )\r\n  }\r\n  let userToken = await AuthUser(data)\r\n  console.log(userToken)*/\n\n  console.log(callGet());\n  var retourDuCallGet;\n  /*console.log(callGet().then(function(result) {\r\n    console.log(\"le result dans le then\")\r\n    console.log(result) // \"Some User token\"\r\n    retourDuCallGet = result;\r\n    console.log('resoleveee')\r\n    //resolve(result)\r\n    return result\r\n  }).then(function(result) {\r\n  console.log(\"le result dans le then\")\r\n  console.log(result) // \"Some User token\"\r\n  retourDuCallGet = result;\r\n  return result\r\n  }))*/\n\n  console.log(\"retourDuCallGet\");\n  console.log(retourDuCallGet);\n  /*retourDuCallGet.forEach((value, key)=> {\r\n    console.log(value)\r\n      rowsFromDB[key] = nodeToRows(value,[]) \r\n   })*/\n\n  console.log(\"rowsFromDB\");\n  console.log(rowsFromDB);\n  return /*#__PURE__*/_jsx(Page, {\n    fullWidth: \"true\",\n    children: /*#__PURE__*/_jsxs(Card, {\n      children: [/*#__PURE__*/_jsx(Button, {\n        onClick: () => callGet(),\n        children: \"Example button\"\n      }), /*#__PURE__*/_jsx(DataTable, {\n        columnContentTypes: ['text', 'text', 'text', 'text', 'text', 'text', 'text'],\n        headings: ['id', 'name', 'email', 'jcp', 'jcp', 'jcp', 'jcp'] //il faut récupérer les order states de la db et peut etre les mettre en cache ca serait cool\n        ,\n        rows: rows //'<img src=\"'+data+'\">'\n\n        /*source={\r\n          item.node.lineItems.edges[0]\r\n            ? item.node.lineItems.edges[0].node.image.originalSrc\r\n            : ''\r\n        }*/\n        //totals={['', '', '', 255, '$155,830.00']}\n\n      })]\n    })\n  });\n}\n\nclass ResourceListWithOrders extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsx(Query, {\n      query: GET_ORDERS_BY_ID,\n      children: ({\n        data,\n        loading,\n        error\n      }) => {\n        if (loading) return /*#__PURE__*/_jsx(\"div\", {\n          children: \"Loading\\u2026\"\n        });\n        if (error) return /*#__PURE__*/_jsx(\"div\", {\n          children: error.message\n        });\n        console.log(data);\n        console.log(data.orders.edges); //console.log(data.orders.edges[0].node.lineItems.edges[0].node.image.originalSrc);\n\n        return DataTableExample(data);\n      }\n    });\n  }\n\n}\n/*<Card>\r\n  <p>Les 50 dernières commandes</p>\r\n  <ResourceList\r\n    showHeader\r\n    resourceName={{ singular: 'Order', plural: 'Orders' }}\r\n    items={data.orders.edges}\r\n    renderItem={item => {\r\n      const orderName = item.node.name\r\n      const media = (\r\n        <Thumbnail\r\n          source={\r\n            item.node.lineItems.edges[0]\r\n              ? item.node.lineItems.edges[0].node.image.originalSrc\r\n              : ''\r\n          }\r\n        />\r\n      );\r\n      const price = item.node.netPaymentSet.shopMoney.amount;\r\n      return (\r\n        \r\n        <ResourceList.Item\r\n        media = {orderName}\r\n         // id={item.id}\r\n          media={media}\r\n          //accessibilityLabel={`View details for ${item.title}`}\r\n          onClick={() => {\r\n            //store.set('item', item);\r\n            console.log('store.set')\r\n            //redirectToProduct();\r\n          }}\r\n        >\r\n          <Stack>\r\n          <Stack.Item>\r\n              <p>{orderName}</p>\r\n            </Stack.Item>\r\n            <Stack.Item fill>\r\n              <h3>\r\n                <TextStyle variation=\"strong\">\r\n                    {item.node.id}\r\n                </TextStyle>\r\n              </h3>\r\n            </Stack.Item>\r\n            <Stack.Item>\r\n              <p>${price}</p>\r\n            </Stack.Item>\r\n            <Stack.Item>\r\n              <p>Expires on R </p>\r\n            </Stack.Item>\r\n          </Stack>\r\n        </ResourceList.Item>\r\n      );\r\n    }}\r\n  />\r\n</Card>\r\n);\r\n}}\r\n</Query>\r\n);\r\n}\r\n}*/\n\n\nexport default ResourceListWithOrders;","map":{"version":3,"sources":["C:/Users/samue/Documents/compta-kraiss/nodee/components/getOrders.js"],"names":["gql","Query","Card","Page","DataTable","Pagination","Button","React","PureComponent","Fragment","ReactDOM","Redirect","Context","Select","axios","GET_ORDERS_BY_ID","retourDuGet","callGet","console","log","get","KEY_NGROKBACK","headers","then","result","retourDeFin","getCol","matrix","col","column","i","length","push","DataTableExample","data","items","orders","edges","itemsToNode","cursor","node","nodeToRows","buildingRaw","Object","entries","forEach","element","index","concat","rows","map","value","key","part","coloneDesEtatsASetter","coloneDesNamesIds","rowsFromDB","retourDuCallGet","ResourceListWithOrders","Component","render","loading","error","message"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport { Card,\r\n  Page,\r\n  DataTable,\r\n  Pagination,\r\nButton} from '@shopify/polaris';\r\nimport React, { PureComponent, Fragment } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Redirect } from '@shopify/app-bridge/actions';\r\nimport { Context } from '@shopify/app-bridge-react';\r\nimport Select from './selectdrop';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nconst GET_ORDERS_BY_ID = gql`\r\nquery {\r\n  orders(first: 50) {\r\n    edges {\r\n      cursor\r\n      node {\r\n        name\r\n        email\r\n        createdAt\r\n        fulfillments{\r\n          id\r\n          name\r\n          trackingInfo{\r\n            company\r\n            number\r\n          }\r\n          estimatedDeliveryAt\r\n          deliveredAt\r\n          displayStatus\r\n          status\r\n        }\r\n        shippingLine{\r\n          carrierIdentifier\r\n        }\r\n        customer{\r\n          firstName\r\n          lastName\r\n          email\r\n        }\r\n      }\r\n    }\r\n  }\r\n}`;\r\n\r\nvar retourDuGet = [];\r\n\r\n /*let AuthUser = function(data) {\r\n    return google.login(data.username, data.password).then(token => { return token } )\r\n  }\r\n  let userToken = await AuthUser(data)\r\n  console.log(userToken)*/\r\n\r\n /* let callGet = function(){\r\n    console.log(\"axios\") \r\n  var retourDeFin;\r\n  retourDuGet = await axios.get(\"https://\"+KEY_NGROKBACK+\".ngrok.io/getStateOrder\", {headers: {\"Content-Type\": 'application/json'}})\r\n  .then(function(result) {\r\n    console.log(\"result dans le then dans le call\")\r\n    console.log(result.data)\r\n    retourDeFin = result.data\r\n    return result.data;\r\n  })\r\n  .catch(err => console.error(err))\r\n // retourDuGet = axios.get(\"https://\"+KEY_NGROKBACK+\".ngrok.io/getStateOrder\", {headers: {\"Content-Type\": 'application/json'}}).value.data\r\n console.log(\"result à la fin du call\")\r\n console.log(retourDeFin) \r\n return retourDeFin\r\n}*/\r\n\r\n/*async function callGet(){\r\n  console.log(\"axios\") \r\n  var retourDeFin;\r\n  retourDuGet = await axios.get(\"https://\"+KEY_NGROKBACK+\".ngrok.io/getStateOrder\", {headers: {\"Content-Type\": 'application/json'}})\r\n  .then(function(result) {\r\n    console.log(\"result dans le then dans le call\")\r\n    console.log(result.data)\r\n    retourDeFin = result.data\r\n    return result.data;\r\n  })\r\n  .catch(err => console.error(err))\r\n // retourDuGet = axios.get(\"https://\"+KEY_NGROKBACK+\".ngrok.io/getStateOrder\", {headers: {\"Content-Type\": 'application/json'}}).value.data\r\n console.log(\"result à la fin du call\")\r\n console.log(retourDeFin) \r\n return retourDeFin\r\n}*/\r\n\r\n\r\nfunction callGet(){\r\n  console.log(\"axios\") \r\n  axios.get(\"https://\"+KEY_NGROKBACK+\".ngrok.io/getStateOrder\", {headers: {\"Content-Type\": 'application/json'}})\r\n  .then(function(result){\r\n    console.log(result)\r\n  })\r\n  \r\n  var retourDeFin;\r\n  retourDuGet = axios.get(\"https://\"+KEY_NGROKBACK+\".ngrok.io/getStateOrder\", {headers: {\"Content-Type\": 'application/json'}})\r\n /* .then(function(result) {\r\n    console.log(\"result dans le then dans le call\")\r\n    console.log(result)\r\n    retourDeFin = result\r\n    return result;\r\n  })\r\n  .catch(err => console.error(err))*/\r\n\r\n // retourDuGet = axios.get(\"https://\"+KEY_NGROKBACK+\".ngrok.io/getStateOrder\", {headers: {\"Content-Type\": 'application/json'}}).value.data\r\n console.log(\"result à la fin du call\")\r\n console.log(retourDeFin) \r\n return retourDeFin\r\n}\r\n\r\nfunction getCol(matrix, col){\r\n  var column = [];\r\n  for(var i=0; i<matrix.length; i++){\r\n     column.push(matrix[i][col]);\r\n  }\r\n  return column;\r\n}\r\n\r\n\r\nfunction DataTableExample(data) {\r\n  const items = data.orders.edges;\r\n  console.log(\"alpha phase\")\r\n  callGet()\r\n  //console.log(callGet())\r\n  //console.log(() => callGet())\r\n\r\n\r\n  function itemsToNode({cursor, node}) {\r\n    return {node}.node\r\n  };\r\n\r\n\r\n  function nodeToRows(node, buildingRaw){\r\n    /*console.log(\"node\")\r\n    console.log(node)\r\n    console.log('dans la lambda profonde')*/\r\n      Object.entries(node).forEach((element, index)=> {\r\n        \r\n        /*console.log(element[0] !== '__typename')\r\n        console.log(element[0] != '__typename')\r\n        console.log(element[0])*/\r\n\r\n        if(element[0] !== '__typename'){\r\n       /* console.log(buildingRaw)\r\n        console.log([element[1]])\r\n        console.log(buildingRaw.concat([element[1]]))\r\n        console.log('____________')*/\r\n          buildingRaw =  (typeof element[1] === 'object' && element[1] !== null) ? nodeToRows(element[1], buildingRaw) : buildingRaw.concat([element[1]]);\r\n        }\r\n      });\r\n      return buildingRaw;\r\n\r\n  }\r\n\r\n  \r\n  \r\n\r\n /* console.log('items.map(itemsToNode)')\r\n  console.log(items.map(itemsToNode))*/\r\n  var rows = [];\r\n  items.map(itemsToNode).forEach((value, key)=> {\r\n   /* console.log('key,value')\r\n    console.log(key)\r\n    console.log(value)*/\r\n    rows[key] = nodeToRows(value,[]) \r\n  })\r\n\r\n  rows.forEach(function(part, index){\r\n  //axios.getEtat du select à setter (en fonction de la page et du tri (le tri doit etre global dans un premier temps et puis on pourra faire un tri sur les seuls éléments de la page aussi))\r\n        rows[index] = [<Select id={index}></Select>].concat(part);\r\n  }, rows);\r\n\r\n  console.log('rows');\r\n  console.log(rows);\r\n\r\n   //on ne tient pas encore compte de la pagination\r\n   var coloneDesEtatsASetter = getCol(rows, 0)\r\n   var coloneDesNamesIds = getCol(rows, 1)\r\n\r\n   var rowsFromDB = [];\r\n  console.log(rowsFromDB)\r\n  console.log(\"beta phase\")\r\n\r\n  /*let AuthUser = function(data) {\r\n    return google.login(data.username, data.password).then(token => { return token } )\r\n  }\r\n  let userToken = await AuthUser(data)\r\n  console.log(userToken)*/\r\n\r\n\r\n  console.log(callGet())\r\n  var retourDuCallGet;\r\n  /*console.log(callGet().then(function(result) {\r\n    console.log(\"le result dans le then\")\r\n    console.log(result) // \"Some User token\"\r\n    retourDuCallGet = result;\r\n    console.log('resoleveee')\r\n    //resolve(result)\r\n    return result\r\n }).then(function(result) {\r\n  console.log(\"le result dans le then\")\r\n  console.log(result) // \"Some User token\"\r\n  retourDuCallGet = result;\r\n  return result\r\n}))*/\r\n  console.log(\"retourDuCallGet\")\r\n  console.log(retourDuCallGet)\r\n  /*retourDuCallGet.forEach((value, key)=> {\r\n    console.log(value)\r\n\r\n    rowsFromDB[key] = nodeToRows(value,[]) \r\n   })*/\r\n   console.log(\"rowsFromDB\")\r\n   console.log(rowsFromDB)\r\n\r\n\r\n  return (\r\n    <Page fullWidth=\"true\">\r\n      <Card>\r\n      <Button onClick={() => callGet()}>Example button</Button>\r\n      {//retourDuGet\r\n      }\r\n        <DataTable\r\n          columnContentTypes={[\r\n            'text',\r\n            'text',\r\n            'text',\r\n            'text',\r\n            'text',\r\n            'text',\r\n            'text',\r\n          ]}\r\n          headings={[\r\n            'id',\r\n            'name',\r\n            'email',\r\n            'jcp',\r\n            'jcp',\r\n            'jcp',\r\n            'jcp',\r\n          ]}\r\n          //il faut récupérer les order states de la db et peut etre les mettre en cache ca serait cool\r\n          rows={rows}\r\n          //'<img src=\"'+data+'\">'\r\n\r\n          /*source={\r\n            item.node.lineItems.edges[0]\r\n              ? item.node.lineItems.edges[0].node.image.originalSrc\r\n              : ''\r\n          }*/\r\n          //totals={['', '', '', 255, '$155,830.00']}\r\n        />\r\n      </Card>\r\n    </Page>\r\n    \r\n\r\n  );\r\n}\r\n\r\nclass ResourceListWithOrders extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <Query query={GET_ORDERS_BY_ID}>\r\n        {({ data, loading, error }) => {\r\n          if (loading) return <div>Loading…</div>;\r\n          if (error) return <div>{error.message}</div>;\r\n          console.log(data);\r\n          console.log(data.orders.edges);\r\n          //console.log(data.orders.edges[0].node.lineItems.edges[0].node.image.originalSrc);\r\n\r\n          return (\r\n            DataTableExample(data)\r\n          );\r\n        }}\r\n        </Query>\r\n    );\r\n      }\r\n    }\r\n\r\n            /*<Card>\r\n              <p>Les 50 dernières commandes</p>\r\n              <ResourceList\r\n                showHeader\r\n                resourceName={{ singular: 'Order', plural: 'Orders' }}\r\n                items={data.orders.edges}\r\n                renderItem={item => {\r\n                  const orderName = item.node.name\r\n                  const media = (\r\n                    <Thumbnail\r\n                      source={\r\n                        item.node.lineItems.edges[0]\r\n                          ? item.node.lineItems.edges[0].node.image.originalSrc\r\n                          : ''\r\n                      }\r\n                    />\r\n                  );\r\n                  const price = item.node.netPaymentSet.shopMoney.amount;\r\n                  return (\r\n                    \r\n                    <ResourceList.Item\r\n                    media = {orderName}\r\n                     // id={item.id}\r\n                      media={media}\r\n                      //accessibilityLabel={`View details for ${item.title}`}\r\n                      onClick={() => {\r\n                        //store.set('item', item);\r\n                        console.log('store.set')\r\n                        //redirectToProduct();\r\n                      }}\r\n                    >\r\n                      <Stack>\r\n                      <Stack.Item>\r\n                          <p>{orderName}</p>\r\n                        </Stack.Item>\r\n                        <Stack.Item fill>\r\n                          <h3>\r\n                            <TextStyle variation=\"strong\">\r\n\r\n                              {item.node.id}\r\n                            </TextStyle>\r\n                          </h3>\r\n                        </Stack.Item>\r\n                        <Stack.Item>\r\n                          <p>${price}</p>\r\n                        </Stack.Item>\r\n                        <Stack.Item>\r\n                          <p>Expires on R </p>\r\n                        </Stack.Item>\r\n                      </Stack>\r\n                    </ResourceList.Item>\r\n                  );\r\n                }}\r\n              />\r\n            </Card>\r\n          );\r\n        }}\r\n      </Query>\r\n    );\r\n  }\r\n}*/\r\n\r\n export default ResourceListWithOrders;"]},"metadata":{},"sourceType":"module"}