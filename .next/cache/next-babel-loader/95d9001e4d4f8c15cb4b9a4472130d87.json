{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Card, Page, DataTable, ResourceList, Stack, TextStyle, Thumbnail } from '@shopify/polaris';\nimport store from 'store-js';\nimport React from 'react';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\n/*mutation exampleProductCreate($input: ProductInput!) {\r\n  productCreate(input: $input) {\r\n    userErrors {\r\n      field\r\n      message\r\n    }\r\n    product {\r\n      id\r\n      title\r\n      productType\r\n    }\r\n  }\r\n}\r\n*/\n\n/*{\r\n  \"input\": {\"title\": \"test product\", \"productType\": \"test type\"}\r\n}*/\n\n/*query {\r\n  orders(first: 3) {\r\n    edges {\r\n      cursor\r\n      node {\r\n        id\r\n        name\r\n        email\r\n        netPaymentSet{\r\n          shopMoney{\r\n            amount\r\n          }\t\r\n        }\r\n      }\r\n    }\r\n    pageInfo {\r\n      hasNextPage\r\n    }\r\n  }\r\n}\r\n*/\n\n/*const GET_ORDERS_BY_ID = gql`\r\nquery {\r\n  orders(first: 50) {\r\n    edges {\r\n      cursor\r\n      node {\r\n        id\r\n        name\r\n        email\r\n        netPaymentSet{\r\n          shopMoney{\r\n            amount\r\n          }\t\r\n        }\r\n        lineItems(first:5){\r\n          edges{\r\n            node{\r\n              name\r\n              image {\r\n                id\r\n                    originalSrc\r\n                    altText\r\n              }\r\n               \r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}`;*/\n\n/*\r\nconst GET_ORDERS_BY_ID = gql`\r\nquery {\r\n  orders(first: 50) {\r\n    edges {\r\n      cursor\r\n      node {\r\n        id\r\n        name\r\n        email\r\n        lineItems(first:5){\r\n          edges{\r\n            node{\r\n              name\r\n              image {\r\n                id\r\n                    originalSrc\r\n                    altText\r\n              }\r\n               \r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}`;*/\n\nconst GET_ORDERS_BY_ID = gql`\nquery {\n  orders(first: 50) {\n    edges {\n      cursor\n      node {\n        name\n        customer{\n          firstName\n          lastName\n          email\n        }\n        email\n        createdAt\n        shippingLine{\n          carrierIdentifier\n        }\n        fulfillments{\n          id\n          name\n          trackingInfo{\n            company\n            number\n          }\n          estimatedDeliveryAt\n          deliveredAt\n          displayStatus\n          status\n        }\n      }\n    }\n  }\n}`;\n\nfunction DataTableExample(data) {\n  const items = data.orders.edges;\n\n  function itemsToNode({\n    cursor,\n    node\n  }) {\n    return {\n      node\n    }.node;\n  }\n\n  ;\n  /*function nodeToRows(node, buildingRaw){\r\n    console.log(\"node\")\r\n    console.log(node)\r\n    console.log('dans la lambda profonde')\r\n        Object.values(node).forEach((element, index)=> {\r\n        \r\n        //console.log(element)\r\n        //console.log(typeof element === 'object' && element !== null)\r\n        console.log(index)\r\n        if(index !== '_typename'){\r\n        console.log(buildingRaw)\r\n        console.log([element])\r\n        console.log(buildingRaw.concat([element]))\r\n        console.log('____________')\r\n          buildingRaw =  (typeof element === 'object' && element !== null) ? nodeToRows(element, buildingRaw) : buildingRaw.concat([element]);\r\n        }\r\n      });\r\n      return buildingRaw;\r\n    }*/\n\n  function nodeToRows(node, buildingRaw) {\n    console.log(\"node\");\n    console.log(node);\n    console.log('dans la lambda profonde');\n    Object.entries(node).forEach((element, index) => {\n      console.log(element[0] !== '__typename');\n      console.log(element[0] != '__typename');\n      console.log(element[0]);\n\n      if (element[0] !== '__typename') {\n        console.log(buildingRaw);\n        console.log([element[1]]);\n        console.log(buildingRaw.concat([element[1]]));\n        console.log('____________');\n        buildingRaw = typeof element[1] === 'object' && element[1] !== null ? nodeToRows(element[1], buildingRaw) : buildingRaw.concat([element[1]]);\n      }\n    });\n    return buildingRaw;\n  }\n\n  console.log('items.map(itemsToNode)');\n  console.log(items.map(itemsToNode));\n  var rows = [];\n  items.map(itemsToNode).forEach((value, key) => {\n    console.log('key,value');\n    console.log(key);\n    console.log(value);\n    rows[key] = nodeToRows(value, []);\n  }); //ajouter etatCommande ici\n\n  console.log('rows');\n  console.log(rows);\n  return /*#__PURE__*/_jsx(Page, {\n    fullWidth: \"true\",\n    children: /*#__PURE__*/_jsx(Card, {\n      children: /*#__PURE__*/_jsx(DataTable, {\n        columnContentTypes: ['text', 'text', 'text', 'text', 'text', 'text', 'text'],\n        headings: ['id', 'name', 'email', 'jcp', 'jcp', 'jcp', 'jcp'],\n        rows: rows //'<img src=\"'+data+'\">'\n\n        /*source={\r\n          item.node.lineItems.edges[0]\r\n            ? item.node.lineItems.edges[0].node.image.originalSrc\r\n            : ''\r\n        }*/\n        //totals={['', '', '', 255, '$155,830.00']}\n\n      })\n    })\n  });\n}\n\nclass ResourceListWithOrders extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsx(Query, {\n      query: GET_ORDERS_BY_ID,\n      children: ({\n        data,\n        loading,\n        error\n      }) => {\n        if (loading) return /*#__PURE__*/_jsx(\"div\", {\n          children: \"Loading\\u2026\"\n        });\n        if (error) return /*#__PURE__*/_jsx(\"div\", {\n          children: error.message\n        });\n        console.log(data);\n        console.log(data.orders.edges); //console.log(data.orders.edges[0].node.lineItems.edges[0].node.image.originalSrc);\n\n        return DataTableExample(data);\n      }\n    });\n  }\n\n}\n/*<Card>\r\n  <p>Les 50 derni√®res commandes</p>\r\n  <ResourceList\r\n    showHeader\r\n    resourceName={{ singular: 'Order', plural: 'Orders' }}\r\n    items={data.orders.edges}\r\n    renderItem={item => {\r\n      const orderName = item.node.name\r\n      const media = (\r\n        <Thumbnail\r\n          source={\r\n            item.node.lineItems.edges[0]\r\n              ? item.node.lineItems.edges[0].node.image.originalSrc\r\n              : ''\r\n          }\r\n        />\r\n      );\r\n      const price = item.node.netPaymentSet.shopMoney.amount;\r\n      return (\r\n        \r\n        <ResourceList.Item\r\n        media = {orderName}\r\n         // id={item.id}\r\n          media={media}\r\n          //accessibilityLabel={`View details for ${item.title}`}\r\n          onClick={() => {\r\n            //store.set('item', item);\r\n            console.log('store.set')\r\n            //redirectToProduct();\r\n          }}\r\n        >\r\n          <Stack>\r\n          <Stack.Item>\r\n              <p>{orderName}</p>\r\n            </Stack.Item>\r\n            <Stack.Item fill>\r\n              <h3>\r\n                <TextStyle variation=\"strong\">\r\n                    {item.node.id}\r\n                </TextStyle>\r\n              </h3>\r\n            </Stack.Item>\r\n            <Stack.Item>\r\n              <p>${price}</p>\r\n            </Stack.Item>\r\n            <Stack.Item>\r\n              <p>Expires on R </p>\r\n            </Stack.Item>\r\n          </Stack>\r\n        </ResourceList.Item>\r\n      );\r\n    }}\r\n  />\r\n</Card>\r\n);\r\n}}\r\n</Query>\r\n);\r\n}\r\n}*/\n\n\nexport default ResourceListWithOrders;","map":{"version":3,"sources":["C:/Users/samue/Documents/compta-kraiss/nodee/components/getOrders.js"],"names":["gql","Query","Card","Page","DataTable","ResourceList","Stack","TextStyle","Thumbnail","store","React","Redirect","Context","GET_ORDERS_BY_ID","DataTableExample","data","items","orders","edges","itemsToNode","cursor","node","nodeToRows","buildingRaw","console","log","Object","entries","forEach","element","index","concat","map","rows","value","key","ResourceListWithOrders","Component","render","loading","error","message"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,IAAT,EACEC,IADF,EAEEC,SAFF,EAGIC,YAHJ,EAIIC,KAJJ,EAKIC,SALJ,EAMIC,SANJ,QAMsB,kBANtB;AAOA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,6BAAzB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,gBAAgB,GAAGb,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAhCA;;AAmCA,SAASc,gBAAT,CAA0BC,IAA1B,EAAgC;AAC9B,QAAMC,KAAK,GAAGD,IAAI,CAACE,MAAL,CAAYC,KAA1B;;AAGA,WAASC,WAAT,CAAqB;AAACC,IAAAA,MAAD;AAASC,IAAAA;AAAT,GAArB,EAAqC;AACnC,WAAO;AAACA,MAAAA;AAAD,MAAOA,IAAd;AACD;;AAAA;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","sourcesContent":["import gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport { Card,\r\n  Page,\r\n  DataTable,\r\n    ResourceList,\r\n    Stack,\r\n    TextStyle,\r\n    Thumbnail, } from '@shopify/polaris';\r\nimport store from 'store-js';\r\nimport React from 'react';\r\nimport { Redirect } from '@shopify/app-bridge/actions';\r\nimport { Context } from '@shopify/app-bridge-react';\r\n\r\n/*mutation exampleProductCreate($input: ProductInput!) {\r\n  productCreate(input: $input) {\r\n    userErrors {\r\n      field\r\n      message\r\n    }\r\n    product {\r\n      id\r\n      title\r\n      productType\r\n    }\r\n  }\r\n}\r\n*/\r\n\r\n/*{\r\n  \"input\": {\"title\": \"test product\", \"productType\": \"test type\"}\r\n}*/\r\n\r\n/*query {\r\n  orders(first: 3) {\r\n    edges {\r\n      cursor\r\n      node {\r\n        id\r\n        name\r\n        email\r\n        netPaymentSet{\r\n          shopMoney{\r\n            amount\r\n          }\t\r\n        }\r\n      }\r\n    }\r\n    pageInfo {\r\n      hasNextPage\r\n    }\r\n  }\r\n}\r\n*/\r\n\r\n/*const GET_ORDERS_BY_ID = gql`\r\nquery {\r\n  orders(first: 50) {\r\n    edges {\r\n      cursor\r\n      node {\r\n        id\r\n        name\r\n        email\r\n        netPaymentSet{\r\n          shopMoney{\r\n            amount\r\n          }\t\r\n        }\r\n        lineItems(first:5){\r\n          edges{\r\n            node{\r\n              name\r\n              image {\r\n                id\r\n                    originalSrc\r\n                    altText\r\n              }\r\n               \r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}`;*/\r\n\r\n\r\n/*\r\nconst GET_ORDERS_BY_ID = gql`\r\nquery {\r\n  orders(first: 50) {\r\n    edges {\r\n      cursor\r\n      node {\r\n        id\r\n        name\r\n        email\r\n        lineItems(first:5){\r\n          edges{\r\n            node{\r\n              name\r\n              image {\r\n                id\r\n                    originalSrc\r\n                    altText\r\n              }\r\n               \r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}`;*/\r\n\r\nconst GET_ORDERS_BY_ID = gql`\r\nquery {\r\n  orders(first: 50) {\r\n    edges {\r\n      cursor\r\n      node {\r\n        name\r\n        customer{\r\n          firstName\r\n          lastName\r\n          email\r\n        }\r\n        email\r\n        createdAt\r\n        shippingLine{\r\n          carrierIdentifier\r\n        }\r\n        fulfillments{\r\n          id\r\n          name\r\n          trackingInfo{\r\n            company\r\n            number\r\n          }\r\n          estimatedDeliveryAt\r\n          deliveredAt\r\n          displayStatus\r\n          status\r\n        }\r\n      }\r\n    }\r\n  }\r\n}`;\r\n\r\n\r\nfunction DataTableExample(data) {\r\n  const items = data.orders.edges;\r\n\r\n\r\n  function itemsToNode({cursor, node}) {\r\n    return {node}.node\r\n  };\r\n\r\n  /*function nodeToRows(node, buildingRaw){\r\n    console.log(\"node\")\r\n    console.log(node)\r\n    console.log('dans la lambda profonde')\r\n\r\n      Object.values(node).forEach((element, index)=> {\r\n        \r\n        //console.log(element)\r\n        //console.log(typeof element === 'object' && element !== null)\r\n        console.log(index)\r\n        if(index !== '_typename'){\r\n        console.log(buildingRaw)\r\n        console.log([element])\r\n        console.log(buildingRaw.concat([element]))\r\n        console.log('____________')\r\n          buildingRaw =  (typeof element === 'object' && element !== null) ? nodeToRows(element, buildingRaw) : buildingRaw.concat([element]);\r\n        }\r\n      });\r\n      return buildingRaw;\r\n\r\n  }*/\r\n\r\n  function nodeToRows(node, buildingRaw){\r\n    console.log(\"node\")\r\n    console.log(node)\r\n    console.log('dans la lambda profonde')\r\n\r\n\r\n      Object.entries(node).forEach((element, index)=> {\r\n        \r\n        console.log(element[0] !== '__typename')\r\n        console.log(element[0] != '__typename')\r\n        console.log(element[0])\r\n\r\n        if(element[0] !== '__typename'){\r\n        console.log(buildingRaw)\r\n        console.log([element[1]])\r\n        console.log(buildingRaw.concat([element[1]]))\r\n        console.log('____________')\r\n          buildingRaw =  (typeof element[1] === 'object' && element[1] !== null) ? nodeToRows(element[1], buildingRaw) : buildingRaw.concat([element[1]]);\r\n        }\r\n      });\r\n      return buildingRaw;\r\n\r\n  }\r\n\r\n  \r\n  \r\n\r\n  console.log('items.map(itemsToNode)')\r\n  console.log(items.map(itemsToNode))\r\n  var rows = [];\r\n  items.map(itemsToNode).forEach((value, key)=> {\r\n    console.log('key,value')\r\n    console.log(key)\r\n    console.log(value)\r\n    rows[key] = nodeToRows(value,[]) \r\n  })\r\n\r\n  //ajouter etatCommande ici\r\n  console.log('rows');\r\n  console.log(rows);\r\n\r\n\r\n  return (\r\n    <Page fullWidth=\"true\">\r\n      <Card>\r\n        <DataTable\r\n          columnContentTypes={[\r\n            'text',\r\n            'text',\r\n            'text',\r\n            'text',\r\n            'text',\r\n            'text',\r\n            'text',\r\n          ]}\r\n          headings={[\r\n            'id',\r\n            'name',\r\n            'email',\r\n            'jcp',\r\n            'jcp',\r\n            'jcp',\r\n            'jcp',\r\n          ]}\r\n          rows={rows}\r\n          //'<img src=\"'+data+'\">'\r\n\r\n          /*source={\r\n            item.node.lineItems.edges[0]\r\n              ? item.node.lineItems.edges[0].node.image.originalSrc\r\n              : ''\r\n          }*/\r\n          //totals={['', '', '', 255, '$155,830.00']}\r\n        />\r\n      </Card>\r\n    </Page>\r\n\r\n  );\r\n}\r\n\r\nclass ResourceListWithOrders extends React.Component {\r\n  render() {\r\n    return (\r\n      <Query query={GET_ORDERS_BY_ID}>\r\n        {({ data, loading, error }) => {\r\n          if (loading) return <div>Loading‚Ä¶</div>;\r\n          if (error) return <div>{error.message}</div>;\r\n          console.log(data);\r\n          console.log(data.orders.edges);\r\n          //console.log(data.orders.edges[0].node.lineItems.edges[0].node.image.originalSrc);\r\n\r\n\r\n\r\n\r\n          return (\r\n            DataTableExample(data)\r\n          );\r\n        }}\r\n        </Query>\r\n    );\r\n      }\r\n    }\r\n\r\n            /*<Card>\r\n              <p>Les 50 derni√®res commandes</p>\r\n              <ResourceList\r\n                showHeader\r\n                resourceName={{ singular: 'Order', plural: 'Orders' }}\r\n                items={data.orders.edges}\r\n                renderItem={item => {\r\n                  const orderName = item.node.name\r\n                  const media = (\r\n                    <Thumbnail\r\n                      source={\r\n                        item.node.lineItems.edges[0]\r\n                          ? item.node.lineItems.edges[0].node.image.originalSrc\r\n                          : ''\r\n                      }\r\n                    />\r\n                  );\r\n                  const price = item.node.netPaymentSet.shopMoney.amount;\r\n                  return (\r\n                    \r\n                    <ResourceList.Item\r\n                    media = {orderName}\r\n                     // id={item.id}\r\n                      media={media}\r\n                      //accessibilityLabel={`View details for ${item.title}`}\r\n                      onClick={() => {\r\n                        //store.set('item', item);\r\n                        console.log('store.set')\r\n                        //redirectToProduct();\r\n                      }}\r\n                    >\r\n                      <Stack>\r\n                      <Stack.Item>\r\n                          <p>{orderName}</p>\r\n                        </Stack.Item>\r\n                        <Stack.Item fill>\r\n                          <h3>\r\n                            <TextStyle variation=\"strong\">\r\n\r\n                              {item.node.id}\r\n                            </TextStyle>\r\n                          </h3>\r\n                        </Stack.Item>\r\n                        <Stack.Item>\r\n                          <p>${price}</p>\r\n                        </Stack.Item>\r\n                        <Stack.Item>\r\n                          <p>Expires on R </p>\r\n                        </Stack.Item>\r\n                      </Stack>\r\n                    </ResourceList.Item>\r\n                  );\r\n                }}\r\n              />\r\n            </Card>\r\n          );\r\n        }}\r\n      </Query>\r\n    );\r\n  }\r\n}*/\r\n\r\n export default ResourceListWithOrders;"]},"metadata":{},"sourceType":"module"}